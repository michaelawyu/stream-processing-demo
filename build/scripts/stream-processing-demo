#!/usr/bin/env sh

##############################################################################
##
##  stream-processing-demo start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/.." >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="stream-processing-demo"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and STREAM_PROCESSING_DEMO_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Dlog4j.configuration=log4j.properties"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/lib/stream-processing-demo-0.1.0.jar:$APP_HOME/lib/flink-streaming-java_2.11-1.9.0.jar:$APP_HOME/lib/flink-clients_2.11-1.9.0.jar:$APP_HOME/lib/flink-optimizer_2.11-1.9.0.jar:$APP_HOME/lib/flink-runtime_2.11-1.9.0.jar:$APP_HOME/lib/flink-java-1.9.0.jar:$APP_HOME/lib/slf4j-log4j12-1.7.7.jar:$APP_HOME/lib/log4j-1.2.17.jar:$APP_HOME/lib/flink-connector-gcp-pubsub_2.11-1.9.0.jar:$APP_HOME/lib/google-cloud-pubsub-1.62.0.jar:$APP_HOME/lib/google-cloud-core-grpc-1.62.0.jar:$APP_HOME/lib/google-cloud-core-1.62.0.jar:$APP_HOME/lib/grpc-google-cloud-pubsub-v1-1.44.0.jar:$APP_HOME/lib/proto-google-cloud-pubsub-v1-1.44.0.jar:$APP_HOME/lib/gax-grpc-1.38.0.jar:$APP_HOME/lib/gax-1.38.0.jar:$APP_HOME/lib/proto-google-iam-v1-0.12.0.jar:$APP_HOME/lib/api-common-1.7.0.jar:$APP_HOME/lib/grpc-alts-1.17.1.jar:$APP_HOME/lib/grpc-grpclb-1.17.1.jar:$APP_HOME/lib/protobuf-java-util-3.6.1.jar:$APP_HOME/lib/grpc-protobuf-1.17.1.jar:$APP_HOME/lib/grpc-netty-shaded-1.17.1.jar:$APP_HOME/lib/grpc-stub-1.17.1.jar:$APP_HOME/lib/grpc-auth-1.17.1.jar:$APP_HOME/lib/grpc-protobuf-lite-1.17.1.jar:$APP_HOME/lib/grpc-core-1.17.1.jar:$APP_HOME/lib/google-auth-library-oauth2-http-0.12.0.jar:$APP_HOME/lib/google-http-client-jackson2-1.27.0.jar:$APP_HOME/lib/google-http-client-1.27.0.jar:$APP_HOME/lib/guava-28.1-jre.jar:$APP_HOME/lib/flink-hadoop-fs-1.9.0.jar:$APP_HOME/lib/flink-core-1.9.0.jar:$APP_HOME/lib/flink-shaded-asm-6-6.2.1-7.0.jar:$APP_HOME/lib/commons-lang3-3.5.jar:$APP_HOME/lib/commons-math3-3.5.jar:$APP_HOME/lib/flink-annotations-1.9.0.jar:$APP_HOME/lib/akka-slf4j_2.11-2.5.21.jar:$APP_HOME/lib/grizzled-slf4j_2.11-1.3.2.jar:$APP_HOME/lib/slf4j-api-1.7.25.jar:$APP_HOME/lib/jsr305-3.0.2.jar:$APP_HOME/lib/flink-metrics-core-1.9.0.jar:$APP_HOME/lib/flink-queryable-state-client-java-1.9.0.jar:$APP_HOME/lib/force-shading-1.9.0.jar:$APP_HOME/lib/flink-shaded-guava-18.0-7.0.jar:$APP_HOME/lib/failureaccess-1.0.1.jar:$APP_HOME/lib/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:$APP_HOME/lib/checker-qual-2.8.1.jar:$APP_HOME/lib/error_prone_annotations-2.3.2.jar:$APP_HOME/lib/j2objc-annotations-1.3.jar:$APP_HOME/lib/animal-sniffer-annotations-1.18.jar:$APP_HOME/lib/kryo-2.24.0.jar:$APP_HOME/lib/commons-collections-3.2.2.jar:$APP_HOME/lib/commons-compress-1.18.jar:$APP_HOME/lib/commons-io-2.4.jar:$APP_HOME/lib/flink-shaded-netty-4.1.32.Final-7.0.jar:$APP_HOME/lib/flink-shaded-jackson-2.9.8-7.0.jar:$APP_HOME/lib/commons-cli-1.3.1.jar:$APP_HOME/lib/javassist-3.19.0-GA.jar:$APP_HOME/lib/scala-library-2.11.12.jar:$APP_HOME/lib/akka-stream_2.11-2.5.21.jar:$APP_HOME/lib/akka-actor_2.11-2.5.21.jar:$APP_HOME/lib/akka-protobuf_2.11-2.5.21.jar:$APP_HOME/lib/scopt_2.11-3.5.0.jar:$APP_HOME/lib/snappy-java-1.1.4.jar:$APP_HOME/lib/chill_2.11-0.7.6.jar:$APP_HOME/lib/javax.annotation-api-1.2.jar:$APP_HOME/lib/minlog-1.2.jar:$APP_HOME/lib/objenesis-2.1.jar:$APP_HOME/lib/config-1.3.3.jar:$APP_HOME/lib/scala-java8-compat_2.11-0.7.0.jar:$APP_HOME/lib/reactive-streams-1.0.2.jar:$APP_HOME/lib/ssl-config-core_2.11-0.3.7.jar:$APP_HOME/lib/chill-java-0.7.6.jar:$APP_HOME/lib/proto-google-common-protos-1.12.0.jar:$APP_HOME/lib/google-auth-library-credentials-0.12.0.jar:$APP_HOME/lib/protobuf-java-3.6.1.jar:$APP_HOME/lib/opencensus-contrib-grpc-metrics-0.17.0.jar:$APP_HOME/lib/opencensus-api-0.17.0.jar:$APP_HOME/lib/grpc-context-1.17.1.jar:$APP_HOME/lib/scala-parser-combinators_2.11-1.1.1.jar:$APP_HOME/lib/httpclient-4.5.5.jar:$APP_HOME/lib/threetenbp-1.3.3.jar:$APP_HOME/lib/gson-2.7.jar:$APP_HOME/lib/httpcore-4.4.9.jar:$APP_HOME/lib/commons-logging-1.2.jar:$APP_HOME/lib/commons-codec-1.10.jar:$APP_HOME/lib/jackson-core-2.9.6.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=$(save "$@")

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $STREAM_PROCESSING_DEMO_OPTS -classpath "\"$CLASSPATH\"" org.example.demo.StreamingJob "$APP_ARGS"

# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
  cd "$(dirname "$0")"
fi

exec "$JAVACMD" "$@"
