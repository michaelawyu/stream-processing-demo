# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401
import json
import uuid
import re

from typing import List, Dict  # noqa: F401

from ..base_model import Model
from .. import util

from .Data import Data  # noqa: E501

class NewPlay(Model):
    """NOTE: This class is auto generated by Cloud Events Generator
    (https://github.com/michaelawyu/cloud-events-generator)
    using modified templates from OpenAPI generator
    (https://github.com/OpenAPITools/openapi-generator)
    under Apache 2.0 License.

    Do not edit the class manually.
    """

    def __init__(self, bypass_check=False, id=None, specversion="0.3", type="com.example.newplay", source="local", data=None):  # noqa: E501
        """NewPlay - a model defined in Cloud Events Generator

        :param id: The id of this NewPlay.  # noqa: E501
        :type id: str
        :param specversion: The specversion of this NewPlay.  # noqa: E501
        :type specversion: str
        :param type: The type of this NewPlay.  # noqa: E501
        :type type: str
        :param source: The source of this NewPlay.  # noqa: E501
        :type source: str
        :param data: The data of this NewPlay.  # noqa: E501
        :type data: Data
        """
        self.openapi_types = {
            'id': str,
            'specversion': str,
            'type': str,
            'source': str,
            'data': Data
        }

        self.attribute_map = {
            'id': 'id',
            'specversion': 'specversion',
            'type': 'type',
            'source': 'source',
            'data': 'data'
        }
        if not bypass_check:
                self.id = id
                self.specversion = specversion
                self.type = type
                self.source = source
                self.data = data
        else:
                self._id = id
                self._specversion = specversion
                self._type = type
                self._source = source
                self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'NewPlay':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: An instance of this NewPlay.  # noqa: E501
        :rtype: NewPlay
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NewPlay.

          # noqa: E501

        :return: The id of this NewPlay.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NewPlay.

          # noqa: E501

        :param id: The id of this NewPlay.
        :type id: str
        """

        if id is None:
                self._id = str(uuid.uuid4())
        else:
                self._id = id

    @property
    def specversion(self):
        """Gets the specversion of this NewPlay.

          # noqa: E501

        :return: The specversion of this NewPlay.
        :rtype: str
        """
        return self._specversion

    @specversion.setter
    def specversion(self, specversion):
        """Sets the specversion of this NewPlay.

          # noqa: E501

        :param specversion: The specversion of this NewPlay.
        :type specversion: str
        """

        if specversion is None:
            raise ValueError("Invalid value for `specversion`, must not be `None`")  # noqa: E501
        if specversion is not None and len(specversion) < 1:
            raise ValueError("Invalid value for `specversion`, length must be greater than or equal to `1`")  # noqa: E501

        self._specversion = specversion


    @property
    def type(self):
        """Gets the type of this NewPlay.

          # noqa: E501

        :return: The type of this NewPlay.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewPlay.

          # noqa: E501

        :param type: The type of this NewPlay.
        :type type: str
        """

        allowed_values = ["com.example.newplay"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type


    @property
    def source(self):
        """Gets the source of this NewPlay.

          # noqa: E501

        :return: The source of this NewPlay.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this NewPlay.

          # noqa: E501

        :param source: The source of this NewPlay.
        :type source: str
        """

        allowed_values = ["local"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source


    @property
    def data(self):
        """Gets the data of this NewPlay.

          # noqa: E501

        :return: The data of this NewPlay.
        :rtype: Data
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this NewPlay.

          # noqa: E501

        :param data: The data of this NewPlay.
        :type data: Data
        """


        self._data = data

